#https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html

version: 0.2

env:
  variables:
    # build_version: "0.1"
    AWS_ECR: 433339126986.dkr.ecr.ap-southeast-1.amazonaws.com
    ECR_REPO: 433339126986.dkr.ecr.ap-southeast-1.amazonaws.com/bgsg/react-sand-test
    CONTAINER_NAME: react-sand-app-test
    NODE_ENV: production

phases:
  install:
    commands:
      - echo Installing packages..
      # - apt-get install -y jq mysql-client
    runtime-versions:
      # python: 3.7
      nodejs: 14

  pre_build:
    commands:
      - curr_working_dir=`pwd`
      - echo ${curr_working_dir}
      - echo ${GIT_BRANCH}
      - echo ${COMMIT_ID}
      #- IMAGE_TAG=$(git rev-parse --short ${COMMIT_ID})
      - IMAGE_TAG=$(echo $COMMIT_ID | head -c 8)
      - echo ${IMAGE_TAG}
      - |
        if [ ${GIT_BRANCH} = "main" ]; then
          ECR_REPO="${AWS_ECR}/bgsg/react-sand-app"
          CONTAINER_NAME="react-sand-app"
          REACT_APP_API_URL="https://api2.blugraph.services/test"
        elif [ ${GIT_BRANCH} = "test" ]; then
          ECR_REPO="${AWS_ECR}/bgsg/react-sand-app-test"
          CONTAINER_NAME="react-sand-app-test"
          REACT_APP_API_URL="https://api2.blugraph.services/test"
        else
          echo "Unknown branch";
        fi      
      - echo ${ECR_REPO}
      - echo ${AWS_DEFAULT_REGION}
      # - echo $GITSSH > ~/.ssh/id_rsa
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_ECR}
  build:
    commands:
      - echo Build started on `date`
      - echo Building the Docker image...
      - cd webapp
      # All steps done inside the multistage docker.
      - yarn install
      - yarn build
      - DOCKER_BUILDKIT=1 docker build -t bgsg/${CONTAINER_NAME} --build-arg NPM_TOKEN=1234 --target=prod .
      - docker tag bgsg/${CONTAINER_NAME} ${ECR_REPO}:${IMAGE_TAG}
      - cd ..
  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker image..
      - docker push ${ECR_REPO}:${IMAGE_TAG}
      - echo Completed pushing Docker image. Deploying Docker image to AWS Fargate on `date`
      # Create a artifacts file that contains the name and location of the image
      # pushed to ECR. This will be used by AWS CodePipeline to automate
      # deployment of this specific container to Amazon ECS.
      - printf '[{"name":"%s","imageUri":"%s"}]' ${CONTAINER_NAME} ${ECR_REPO}:${IMAGE_TAG} > imagedefinitions.json
      - cat imagedefinitions.json
      - echo Build completed on `date`
artifacts:
  # Indicate that the created imagedefinitions.json file created on the previous
  # line is to be referenceable as an artifact of the build execution job.
  # base-directory: outputDirectory
  # files:
  #   - '**/*'
  # files: imagedefinitions.json
  files: 
    - imagedefinitions.json
